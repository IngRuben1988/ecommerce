<!-- Components/Layout/NavMenu.razor (Modificado para Navbar Superior) -->
@inject NavigationManager NavigationManager
@inject ECommerceServer.Src.Services.SimulatedAuthStateService AuthStateService
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-dark bg-dark"> @* Clases principales de Bootstrap para la navbar *@
    <div class="container-fluid">
        <a class="navbar-brand" href="">E-Shop Demo</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavMenuCssClass" id="navbarNav">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0"> @* ms-auto para alinear a la derecha, o me-auto para izquierda *@

                @if (AuthStateService.IsLoggedIn)
                {
                    // --- MENÚ PARA USUARIOS LOGUEADOS ---
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/products" Match="NavLinkMatch.Prefix"> @* Cambiado href a /products *@
                            Products
                        </NavLink>
                    </li>
                    @* Puedes añadir más NavLink como <li> aquí *@

                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownUser" role="button" data-bs-toggle="dropdown" aria-expanded="false"  @onclick="HandleLogout">
                            Hola, @AuthStateService.Username!
                        </a>
                        
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownUser">
                            <li><a class="dropdown-item" href="#">Mi Perfil (Ejemplo)</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <button class="dropdown-item" @onclick="HandleLogout">Logout</button>
                            </li>
                        </ul>
                    </li>
                }
                else
                {
                    // --- MENÚ PARA USUARIOS NO LOGUEADOS ---
                    @if (!IsOnLoginPage)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="login">
                                Login
                            </NavLink>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? null : "show";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    // --- Tu código C# existente para IsOnLoginPage, OnInitialized, HandleLocationChanged, etc. ---
    // --- Pega aquí el bloque @code que ya tenías, EXCEPTO las variables para el toggler si las reemplazas ---
    private bool IsOnLoginPage => NavigationManager.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase) ||
                                  NavigationManager.Uri.Contains("/login?", StringComparison.OrdinalIgnoreCase);

    protected override void OnInitialized()
    {
        AuthStateService.OnChange += TriggerStateHasChanged;
        NavigationManager.LocationChanged += HandleLocationChanged;
        // Console.WriteLine($"NavMenu OnInitialized. IsLoggedIn: {AuthStateService.IsLoggedIn}, IsOnLoginPage: {IsOnLoginPage}");
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
        // Console.WriteLine($"NavMenu LocationChanged: {e.Location}. IsOnLoginPage: {IsOnLoginPage}");
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
        // Console.WriteLine($"NavMenu AuthStateChanged. IsLoggedIn: {AuthStateService.IsLoggedIn}, Username: {AuthStateService.Username}");
    }

    private void HandleLogout()
    {
        // Console.WriteLine("NavMenu HandleLogout initiated.");
        AuthStateService.Logout();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    public void Dispose()
    {
        AuthStateService.OnChange -= TriggerStateHasChanged;
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}